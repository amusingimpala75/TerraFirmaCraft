import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
    id 'net.minecrell.licenser' version '0.4.1'
    id 'idea'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = "TerraFirmaCraft-Fabric-${minecraft_version}"
version = project.mod_version
group = "net.dries007.tfc"

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    mavenCentral()
    mavenLocal()
    maven {
        name 'Jitpack' // Used by mcjunitlib
        url 'https://jitpack.io'
    }
}

loom {
    accessWidener "src/main/resources/tfc.accesswidener"
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:2.7.11"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:2.7.11"

    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-util:2.7.11"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-util:2.7.11"

    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:2.7.11"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:2.7.11"

    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-world:2.7.11"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-world:2.7.11"

    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-chunk:2.7.11"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-chunk:2.7.11"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
    	doLast {
        	fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
            	file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            	file.text = file.text.replace('"__comment__":"This file was automatically created by mcresources",', '')
        }
    }
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	def targetVersion = 8
	if (JavaVersion.current().isJava9Compatible()) {
		 it.options.release = targetVersion
	}
}

// Automatically apply a license header when running checkLicense / updateLicense
license {
    header = project.file('HEADER.txt')

    include '**/*.java'

    // Fast Noise
    exclude 'net/dries007/tfc/world/noise/Cellular2D.java'
    exclude 'net/dries007/tfc/world/noise/Cellular3D.java'
    exclude 'net/dries007/tfc/world/noise/NoiseUtil.java'
    exclude 'net/dries007/tfc/world/noise/OpenSimplex2D.java'
    exclude 'net/dries007/tfc/world/noise/OpenSimplex3D.java'
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}
    
    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
